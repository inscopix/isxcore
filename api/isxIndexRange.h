#ifndef ISX_INDEX_RANGE_H
#define ISX_INDEX_RANGE_H

#include "isxCore.h"

#include <vector>

namespace isx
{

/// A contiguous range of indices.
///
/// This is used as an element to crop. It may represent a single frame
/// or many frames (e.g. from frame 20 to 30).
///
/// The range is inclusive at both ends.
/// I.e. a range of [3, 5] includes 3, 4 and 5.
struct IndexRange
{

    /// Default constructor
    ///
    IndexRange();

    /// Constructor for a single frame index.
    ///
    /// \param  inIndex     The only index in the range.
    IndexRange(const isize_t inIndex);

    /// Constructor for first and last indices.
    ///
    /// \param  inFirst     The first index in the range.
    /// \param  inLast      The last index in the range.
    IndexRange(const isize_t inFirst, const isize_t inLast);

    /// Constructor from string representation generated by toString.
    ///
    /// \param  inStr   The string represent of the range.
    IndexRange(const std::string & inStr);

    /// \return The string representation of this range of the form "<first>:<last>".
    ///
    std::string toString() const;

    /// \return The number of indices contained in the range.
    ///
    size_t getSize() const;

    /// \return         True if the index is contained in this range, false otherwise.
    /// \param  inIndex The index to check.
    bool contains(const isize_t inIndex) const;

    /// \return         True if this range is equal to another.
    /// \param  inOther The range with which to compare.
    bool operator ==(const IndexRange & inOther) const;

    /// \return         True if this range is less than another.
    /// \param  inOther The range with which to compare.
    bool operator <(const IndexRange & inOther) const;

    /// The first index.
    isize_t m_first = 0;

    /// The last index.
    isize_t m_last = 0;

    /// The character used to separate first from last when serialized.
    static const char s_delimiter = '-';
};

/// Overload << for appending ranges as strings to output streams.
///
/// \param  inOutStream The stream to which to append.
/// \param  inRange     The range to append as a string.
std::ostream & operator <<(std::ostream & inOutStream, const IndexRange & inRange);

/// The type used to store a list of index ranges (e.g. cropped frames).
using IndexRanges_t = std::vector<IndexRange>;

/// We need to convert cropped frames to a JSON string in a few places
/// and this function allows to define this once.
///
/// \param  inRanges    The ranges to convert.
/// \return             The JSON string representation of the ranges.
std::string
convertIndexRangesToString(const IndexRanges_t & inRanges);

/// Sorts and compacts a list of index ranges to have as few elements as possible.
///
/// \param  inRanges    The ranges to compact.
/// \return             The compacted index ranges.
IndexRanges_t
sortAndCompactIndexRanges(const IndexRanges_t & inRanges);

} // namespace isx

#endif // ISX_INDEX_RANGE_H
